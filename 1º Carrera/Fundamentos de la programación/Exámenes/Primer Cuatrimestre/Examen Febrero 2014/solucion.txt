#include <iostream>
#include <string>
#include <fstream>
#include <iomanip>
using namespace std;

typedef enum {papeleria, alimentacion, limpieza, informatica} tClase;

typedef struct {
  string nif;
  tClase clase;
  double gastoAc;
  int numPedidos;
} tProveedor;

const int NP = 4;
typedef tProveedor tListaProv[NP];

const int N_CATS = 4;
typedef double tGastos[N_CATS];


//Funciones pedidas
bool cargar(tListaProv l);
void guardar(const tListaProv l);
bool buscarProveedor(const tListaProv l, string nif, int & pos);
bool nuevoPedido(tListaProv l, string nif, double precio);
void mostrarXIntervalo(const tListaProv l);
void totalesXClase(const tListaProv l, tGastos gastos);

//Otras de entrada/salida
bool cargarProveedor(istream & ent, tProveedor & proveedor);
void guardarProveedor(ostream & sal, tProveedor p);
void mostrarProveedor(tProveedor p);

//Funciones de opciones del menu (podrian no hacerse)
void nuevoPedido(tListaProv l);
void filtrar(const tListaProv l);
void mostrarGastosXClase(const tListaProv l);

//Otras auxiliares
string claseToString(tClase clase);
int menu();

////////

int main(){
  tListaProv lista;
  if(!cargar(lista))
    cout << "Error en el archivo" << endl;
  else{
    int op = menu();
    while (op != 0){
      if (op == 1) nuevoPedido(lista);
      else if (op == 2) filtrar(lista);
      else mostrarGastosXClase(lista);
      op = menu();
    }
    guardar(lista);
  }
  return 0;
}

bool cargarProveedor(istream & ent, tProveedor & proveedor){
  ent >> proveedor.nif;
  int claseNum;
  ent >> claseNum;
  proveedor.clase = tClase(claseNum);
  ent >> proveedor.numPedidos;
  ent >> proveedor.gastoAc;
  return !ent.fail();
}

bool cargar(tListaProv l){
  bool ok;
  ifstream ent;
  ent.open("proveedores.txt");
  if(!ent.is_open())
    ok = false;
  else {
    ok = true;
    int pos = 0;
    while (ok && (pos < NP)){ //correcto tanto con centinela como sin el
      if (cargarProveedor(ent, l[pos]))
	pos++;
      else
	ok = false;
    }
    ent.close();
  }
  return ok;
}

void guardarProveedor(ostream & sal, tProveedor p){
  sal << p.nif << " " << int(p.clase) << " " << p.numPedidos << " " << p.gastoAc << endl;
}

void mostrarProveedor(tProveedor p){
  cout << left << setw(10) << p.nif;
  cout << setw(13) << claseToString(p.clase);
  cout << setw(3) << p.numPedidos;
  cout << fixed << setprecision(2) << setw(10) << right << p.gastoAc << endl;
}


void guardar(const tListaProv l){
  ofstream sal;
  sal.open("proveedores.txt");
  for(int i = 0; i < NP; i++)
    guardarProveedor(sal, l[i]);
  sal << "X";  //Borrar esta linea si se hace sin centinela
  sal.close();
}

bool buscarProveedor(const tListaProv l, string nif, int & pos){
  pos = 0;
  bool enc = false;
  while (!enc && (pos < NP))
    if (l[pos].nif == nif)
      enc = true;
    else
      pos++;
  return enc;
}

bool nuevoPedido(tListaProv l, string nif, double precio){
  int pos;
  bool enc = buscarProveedor(l, nif, pos);
  if (enc){
    l[pos].numPedidos++;
    l[pos].gastoAc += precio;
  }
  return enc;
}


void nuevoPedido(tListaProv l){
  string nif;
  double precio;
  cout << "Proveedor: ";
  cin >> nif;
  cout << "Precio: ";
  cin >> precio;
  if (!nuevoPedido(l, nif, precio))
    cout << "No existe el proveedor con NIF " << nif << endl;
}

void mostrarXIntervalo(const tListaProv l, int minimo, int maximo){
  cout << endl << "Listado de proveedores con gastos entre " << minimo << " y " << maximo << ":" << endl << endl;
  for (int i = 0; i < NP; i++)
    if ((minimo <= l[i].numPedidos) && (l[i].numPedidos <= maximo))
      mostrarProveedor(l[i]);
}

void filtrar(const tListaProv l){
  int minimo, maximo;
  cout << "Minimo gasto: ";
  cin >> minimo;
  cout << "Maximo gasto: ";
  cin >> maximo;
  mostrarXIntervalo(l, minimo, maximo);
}

void totalesXClase(const tListaProv l, tGastos gastos){
  for(int i = 0; i < N_CATS; i++)
    gastos[i] = 0;
  for(int i = 0; i < NP; i++)
    gastos[l[i].clase] += l[i].gastoAc;
}

void mostrarGastosXClase(const tListaProv l){
  tGastos gastos;
  totalesXClase(l, gastos);
  for(int i = 0; i < N_CATS; i++)
    cout << left << setw(12) << claseToString(tClase(i)) << "  " << setw(10) << right << fixed << setprecision(2) << gastos[i] << endl;
}

int menu(){
  int op;
  cout << endl << endl;
  cout << " 1 - Nuevo pedido" << endl;
  cout << " 2 - Proveedores con numero de pedidos en un intervalo" << endl;
  cout << " 3 - Gastos por clase de proveedor" << endl;
  cout << " 0 - Salir" << endl;
  cout << endl << "Opcion: ";
  cin >> op;
  while ((op < 0) || (op > 3)){
    cout << "Opcion incorrecta. Nueva opcion: ";
    cin >> op;
  }
  return op;
}

string claseToString(tClase c){
  string s;
  if (c == alimentacion)
    s = "Alimentacion";
  else if (c == informatica)
    s = "Informatica";
  else if (c == limpieza)
    s = "Limpieza";
  else
    s = "Papeleria";
  return s;
}